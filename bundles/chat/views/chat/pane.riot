<chat-pane>
  <div class={ `card card-chat${chat.get('minimised') ? ' chat-closed' : ' chat-open'}` }>
    <div class="card-header" if={ !props.noHeader }>
      <div class="w-100">
        <div class="row row-eq-height">
          <div class="col-7 d-flex align-items-center">
            <div class="w-100 text-overflow">
              <span class="badge badge-success" if={ chat.get('unread') }>
                { chat.get('unread') }
              </span>
              { getUsernames() }
            </div>
          </div>
          <div class="col-5">
            <div class="btn-group btn-group-sm float-right">
              <button class="btn btn-secondary" if={ chat.get('style') } onclick={ (e) => onReturn(e) }>
                <i class="fa fa-undo" />
              </button>
              <button class="btn btn-secondary" onclick={ (e) => onToggleOpen(e) }>
                <i class={ `fa fa-window-${chat.get('minimised') ? 'maximize' : 'minimize'}` } />
              </button>
              <button class="btn btn-secondary moves">
                <i class="fa fa-arrows" />
              </button>
              <button class="btn btn-danger" onclick={ (e) => onClose(e) }>
                <i class="fa fa-times" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class={ classes({ 'card-body' : true, 'd-none' : chat.get('minimised') }) } ref="messages">
      <ul>
        
        <li each={ (message, i) in messages } is="chat-message" class="clearfix" chat={ chat } message={ message } previous={ messages[i - 1] } next={ messages[i + 1] } />
        
      </ul>
      <small if={ getTyping().length }>{ getTyping() }</small>
    </div>
    <div class={ classes({ 'card-footer p-2' : true, 'd-none' : chat.get('minimised') }) }>
      <div ref="embeds" if={ embeds.length } class="mb-2 chat-embeds">
        <div each={ (embed, i) in embeds } class="embed" style={ embed.type === 'image' ? `background-image:url(${embed.thumb});` : '' } title={ embed.name }>
          <i class={ `fa ${embed.icon}` } />
          <span class="embed-name">
            { embed.name }
          </span>
          <button class="btn btn-sm btn-danger" onclick={ (e) => onRemoveEmbed(e, embed) }>
            <i class="fa fa-times" />
          </button>
        </div>
      </div>
      <div class="form-group m-0">
        <div class="input-group input-group-sm">
        <div class="input-group-prepend">
          <button class="btn btn-file btn-primary">
            <input type="file" ref="upload" onchange={ (e) => onFile(e) } multiple />
            <i class="fa fa-plus" />
          </button>
        </div>
          <input class="form-control" type="text" ref="message" onkeyup={ (e) => onKeyUp(e) } />
          <div class="input-group-append">
            <button class="btn btn-primary" onclick={ (e) => onSend(e) }>
              <i class="fa fa-paper-plane" />
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // import
    import uuid from 'uuid';
    import icons from 'font-awesome-filetypes';
    import moment from 'moment';
    import Scrollbar from 'perfect-scrollbar';
    
    // import local dependencies
    import Base from '../js/base';
    import Media from 'asset/public/js/bootstrap';

    /**
     * export default
     */
    export default class ChatMessage extends Base {
      
      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // on before mount
        super.onBeforeMount(...args);

        // set media
        this.media = Media;

        // bind methods
        this.onTyping = this.onTyping.bind(this);
        this.onMessage = this.onMessage.bind(this);
        this.onRemoveMessage = this.onRemoveMessage.bind(this);

        // set chat
        this.chat      = this.props.chat;
        this.embeds    = [];
        this.typing    = this.chat.get('typing') || [];
        this.messages  = this.chat.get('messages') || [];
        this.uploading = [];
      }

      /**
       * on mounted
       */
      onBeforeUnmount(...args) {
        // run super
        super.onBeforeUnmount(...args);
      
        // on created
        eden.socket.off(`chat.${this.chat.get('id')}.typing`, this.onTyping);
        eden.socket.off(`chat.${this.chat.get('id')}.remove`, this.onRemoveMessage);
        eden.socket.off(`chat.${this.chat.get('id')}.message`, this.onMessage);
      }

      /**
       * on mounted
       */
      onMounted(...args) {
        // run super
        super.onMounted(...args);
          
        // check frontend
        if (!this.eden.frontend || !eden.get('user').exists()) return;
        
        // on created
        eden.socket.on(`chat.${this.chat.get('id')}.typing`, this.onTyping);
        eden.socket.on(`chat.${this.chat.get('id')}.message`, this.onMessage);
        
        // scroll to bottom
        this.doScroll();
      }
    
      /**
       * on close
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      onClose(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // close
        this.props.onClose(this.chat);
      }
      
      /**
       * on send
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      async onSend(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // return no message
        if ((!this.refs.message.value || '').trim().length) {
          return;
        }

        // create message
        const message = {
          from    : this.eden.get('user').get('id'),
          uuid    : uuid(),
          embeds  : this.embeds,
          message : this.refs.message.value,
        };
        
        // push message
        this.embeds = [];
        this.refs.message.value = '';
        
        // update view
        this.onMessage(message);
        
        // check embeds
        if (message.embeds) {
          // do fetch request
          const images = await Promise.all(message.embeds.map((embed) => {
            // ajax upload
            return this._ajaxUpload(embed, embed.type);
          }));
          
          // update to remove loading
          this.update();
          
          // set chat style
          await eden.socket.call('chat.message.send', this.chat.get('id'), Object.assign({}, message, {
            embeds : images.map((image) => image.id),
          }));
        } else {
          // set chat style
          await eden.socket.call('chat.message.send', this.chat.get('id'), message);
        }
        
        // set typing
        await eden.socket.call('chat.member.typing', this.chat.get('id'), false);
      }
      
      /**
       * on send
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      onFile(e) {      
        // get value
        const files = Array.from(e.target.files || []);
        
        // loop files
        files.forEach(async (file) => {
          // get embed
          const embed = {
            'file'     : file,
            'name'     : file.name,
            'icon'     : icons.getClassNameForExtension(file.name.split('.').pop()),
            'type'     : icons.getClassNameForExtension(file.name.split('.').pop()).includes('image') ? 'image' : 'file',
            'size'     : file.size,
            'temp'     : uuid(),
            'uploaded' : 0
          };
          
          // if image
          if (embed.type === 'image') {
            // create new reader
            const read = new FileReader();

            // onload
            const wait = new Promise((resolve) => {
              // await promise
              read.onload = () => {
                // set result
                embed.thumb = read.result;
                
                // resolve
                resolve();
              };
            });
    
            // read file
            read.readAsDataURL(file);
            
            // wait
            await wait;
          }
          
          // push embed
          this.embeds.push(embed);
          
          // update
          this.update();
        });
      }
      
      /**
       * on remove embed
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      onRemoveEmbed(e, embed) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // check stuff
        this.embeds = this.embeds.filter(e => e.temp !== embed.temp);
        
        // update
        this.update();
      }
      
      /**
       * on keyup
       *
       * @param  {Event} e
       */
      onKeyUp(e) {
        // enter pressed
        if ((e.keyCode ? e.keyCode : e.which) === 13) {
          // send message
          return this.onSend(e);
        }
        
        // set typing
        if ((this.refs.message.value || '').trim().length) {
          // set typing
          eden.socket.call('chat.member.typing', this.chat.get('id'), true);
        } else {
          // clear typing
          eden.socket.call('chat.member.typing', this.chat.get('id'), false);
        }
      }
      
      /**
       * on toggle open
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      onReturn(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // set style
        this.chat.set('style', null);
        
        // set chat style
        eden.socket.call('chat.member.set', this.chat.get('id'), 'style', this.chat.get('style'));
        
        // update
        this.props.onRefresh();
      }
      
      /**
       * on toggle open
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      onToggleOpen(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();
        
        // on toggle open
        this.chat.set('minimised', !this.chat.get('minimised'));
        
        // set chat style
        eden.socket.call('chat.member.set', this.chat.get('id'), 'minimised', this.chat.get('minimised'));
        
        // update view
        this.update();
      }

      /**
       * on toggle open
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      async onMessage(message) {
        // check found
        const found = this.messages.find(m => m.uuid === message.uuid);
        
        // check found
        if (found) {
          // set stuff
          Object.keys(message).forEach((key) => {
            // set value
            found[key] = message[key];
          });
        } else {
          // push message
          this.messages.push(message);
        }
        
        // on read
        if (this.chat.get('active')) {
          // on read
          this.props.onRead(this.chat);
        } else {
          // flash title
          
        }
        
        // update view
        this.update();
        
        // scroll to bottom
        this.refs.messages.scrollTop = this.refs.messages.scrollHeight;
      }

      /**
       * on toggle open
       *
       * @param  {Event} e
       *
       * @return {*}
       */
      async onRemoveMessage(id) {
        // check found
        this.messages = this.messages.filter(m => m.uuid === id);
        
        // update view
        this.update();
        
        // scroll to bottom
        this.refs.messages.scrollTop = this.refs.messages.scrollHeight;
      }
      
      /**
       * on typing
       *
       * @param  {Array} typing
       *
       * @return {*}
       */
      onTyping(typing) {
        // check timeout
        let timeout = null;
        
        // set dates
        this.typing = typing.filter((item) => item.when > 0).map((item) => {
          // timeout
          if (!timeout || timeout > item.when) timeout = item.when;

          // return item
          return {
            user : item.user,
            when : new Date((new Date()).getTime() + item.when),
          };
        }).filter((item) => {
          // return when
          return item.when > new Date((new Date()).getTime() - (5 * 1000));
        });
        
        // clear timeout
        clearTimeout(this.__typing);
        
        // set timeout
        if (timeout) {
          // timeout
          this.__typing = setTimeout(() => {
            // set typing again
            this.onTyping(typing.map((item) => {
              // return altered item
              return {
                user : item.user,
                when : item.when - timeout,
              };
            }));
          }, timeout + 100);
        }
        
        // update view
        this.update();
        this.scrollbar.update();
      }
      
      /**
       * gets usernames
       *
       * @return {*}
       */
      getUsernames() {
        // return usernames
        return this.chat.get('members').filter((user) => user.id !== this.eden.get('user').get('id')).map((user) => user.username).join(', ');
      }
      
      /**
       * gets usernames
       *
       * @return {*}
       */
      getTyping() {
        // return usernames
        const typing = this.typing.filter(indicator => indicator.members !== this.eden.get('user').get('id')).map((item) => {
          // find user
          const member = this.chat.get('members').find((member) => {
            // return user
            return member.id === item.member;
          });
          
          // return user
          if (!member) return;
          
          // return username
          return member.username;
        }).filter((item) => item);
        
        // set typing
        if (typing.length === 1) {
          // is typing
          return `${typing[0]} is typing...`;
        } else if (typing.length > 4) {
          // many people
          return `many people are typing...`;
        } else if (typing.length) {
          // return typing
          return `typing.join(', ').replace(/,(?!.*,)/gmi, ' and') are typing...`;
        }
        
        // return joined typing
        return '';
      }

      /**
       * remove value from upload
       *
       * @param {Object} val
       *
       * @private
       */
      _remove (val) {
        // let id
        let id = val.id;

        // check uuid
        if (val.temp) id = val.temp;

        // loop values
        for (var i = 0; i < this.value.length; i++) {
          // check value
          if (this.value[i].id === id || this.value[i].temp === id) {
            // set value
            this.value.splice(i, 1);

            // return update
            return this.update();
          }
        }
      }

      /**
       * ajax upload function
       *
       * @param {Object} value
       *
       * @private
       */
      _ajaxUpload (value, type) {
        // require uuid
        const uuid = require('uuid');

        // create form data
        let data = new FormData();

        // append image
        data.append('file', value.file);
        data.append('temp', value.temp);
        
        // create promise
        const rtn = new Promise((resolve, reject) => {
          jQuery.ajax({
            'url' : `/media/${type}`,
            'xhr' : () => {
              // get the native XmlHttpRequest object
              var xhr = jQuery.ajaxSettings.xhr();
    
              // set the onprogress event handler
              xhr.upload.onprogress = (evt) => {
                // log progress
                const progress = (evt.loaded / evt.total) * 100;
    
                // set progress
                value.progress = progress;
    
                // update
                this.update();
              };
    
              // return the customized object
              return xhr;
            },
            'data'  : data,
            'type'  : 'post',
            'cache' : false,
            'error' : () => {
              // do error
              eden.alert.alert('error', `Error uploading ${type}`);
    
              // remove from array
              value.error = true;
              
              // update
              this.update();
              
              // reject
              reject();
            },
            'success' : (data) => {  
              // check if error
              if (data.error) {
                // error
                reject(data.message);
                
                // do message
                return eden.alert.alert('error', data.message);
              }
    
              // check if image
              if (data.upload) value.id = data.upload.id;
              
              // resolve
              resolve(data.upload);
            },
            'dataType'    : 'json',
            'contentType' : false,
            'processData' : false
          });
        });

        // submit ajax form
        this.uploading.push(rtn);
        
        // return
        return rtn;
      }
      
      /**
       * do scroll
       *
       * @return {*}
       */
      doScroll() {
        // set up scrollbar
        if (!this.scrollbar) {
          // do scrollbar
          this.scrollbar = new Scrollbar(this.refs.messages);
        }
        
        // set scroll height
        if (this.refs.messages) this.refs.messages.scrollTop = this.refs.messages.scrollHeight;
        
        // scroll to bottom
        setTimeout(() => {
          // set scroll height
          if (this.refs.messages) this.refs.messages.scrollTop = this.refs.messages.scrollHeight;
        }, 100);
        
        // check embeds
        if (this.refs.embeds && !this.embedScroll) {
          // set embed scrollbar
          this.embedScroll = new Scrollbar(this.refs.embeds);
        } else if (!this.refs.embeds) {
          // reset
          this.embedScroll = null;
        }
      }
    }
  </script>
</chat-pane>
